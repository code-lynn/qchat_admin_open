<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.qunar.chat.dao.QueueMappingDao">

    <resultMap id="queueMap" type="com.qunar.chat.entity.QueueMapping">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="customer_name" property="customerName" jdbcType="VARCHAR"/>
        <result column="distributed_time" property="distributedTime" jdbcType="TIMESTAMP"/>
        <result column="inqueue_time" property="inqueueTime" jdbcType="TIMESTAMP"/>
        <result column="last_ack_time" property="lastAckTime" jdbcType="TIMESTAMP"/>
        <result column="seat_name" property="seatName" jdbcType="VARCHAR"/>
        <result column="session_id" property="sessionId" jdbcType="VARCHAR"/>
        <result column="shop_id" property="shopId" jdbcType="INTEGER"/>
        <result column="seat_id" property="seatId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="request_count" property="requestCount" jdbcType="INTEGER"/>
        <result column="product_id" property="productId" jdbcType="VARCHAR"/>
    </resultMap>

    <update id="updateByNameAndShopId">
        UPDATE queue_mapping set last_ack_time = #{lastAckTime}, status = #{status} where customer_name = #{customerName} and  shop_id = #{shopId}
    </update>

    <select id="selectNoSeatByShopId" resultMap="queueMap">
        select * from queue_mapping where shop_id = #{shopId} and seat_id= 0;
    </select>

    <select id="addQueue" resultType="com.qunar.chat.common.business.QueueUser">
        INSERT INTO queue_mapping(customer_name, shop_id, product_id) VALUES (#{customerName}, #{shopId}, #{productId}) ON CONFLICT (customer_name, shop_id)
        DO UPDATE SET request_count = queue_mapping.request_count + 1, inqueue_time = now(), product_id=#{productId} RETURNING request_count, inqueue_time, last_ack_time, session_id;
    </select>

    <update id="updateSeatName">
        update queue_mapping set seat_id = #{seatId}, seat_name = #{seatName}, distributed_time = now(), product_id= #{productId} where customer_name = #{customerName} and shop_id = #{shopId};
    </update>

    <select id="selectByCustomerNameAndShopId">
        select * from queue_mapping where customer_name = #{customerName} and shop_id = #{shopId}  order by id desc limit 1
    </select>

    <update id="updateStatusBySessionIds">
        update queue_mapping set status = #{status} where session_id
        in
        <if test="list != null and list.size() > 0">
            <foreach collection="list" open="(" close=")" separator="," item="sessionId">
                #{sessionId}
            </foreach>
        </if>
    </update>


    <select id="selectBetweenTime" resultMap="queueMap">
        select * from queue_mapping where seat_id != 0 and last_ack_time BETWEEN #{startTime} AND #{endTime};
    </select>

    <select id="selectByAckTime" resultMap="queueMap">
        select * from queue_mapping where seat_id != 0 and last_ack_time >= #{ackTime};
    </select>

    <select id="selectValidQueue" resultMap="queueMap">
        select * from queue_mapping where seat_id = 0 and last_ack_time >= #{ackTime};
    </select>

    <select id="finishedSession" resultMap="queueMap">
        insert into session_mapping(customer_name, shop_id, product_id, session_id, seat_id, status, request_count,
        distributed_time, inqueue_time, last_ack_time, seat_name)
        select customer_name, shop_id, product_id, session_id, seat_id, status, request_count, distributed_time,
        inqueue_time, last_ack_time, seat_name from queue_mapping
        where seat_id !=0 and #{ackTime} >= last_ack_time returning customer_name, shop_id, product_id, session_id, seat_id,
        status, request_count, distributed_time, inqueue_time, last_ack_time, seat_name;
    </select>

    <delete id="deleteBySessionIds" parameterType="java.util.List">
        delete from queue_mapping where session_id in
        <if test="list != null and list.size() > 0">
            <foreach collection="list" open="(" close=")" separator="," item="sessionId">
                #{sessionId}
            </foreach>
        </if>
    </delete>

    <select id="selectTimeoutSession" resultMap="queueMap">
        select * from queue_mapping where seat_id = 0 and #{ackTime}>=last_ack_time;
    </select>

    <select id="selectTimeoutByStatus" resultMap="queueMap">
        select * from queue_mapping where seat_id != 0 and #{ackTime}>=last_ack_time AND status = #{status};
    </select>

    <select id="closeSession" resultMap="queueMap">
        insert into session_mapping(customer_name, shop_id, product_id, session_id, seat_id, seat_name, status, request_count, distributed_time, inqueue_time, last_ack_time)
                     select customer_name, shop_id, product_id, session_id, seat_id, seat_name, status, request_count, distributed_time, inqueue_time, last_ack_time from queue_mapping
                    where customer_name = #{customerName} and shop_id = #{shopId} and seat_name = #{seatName} returning session_id, product_id;
    </select>

    <select id="selectSeatServiceCount" resultType="java.lang.Integer">
        select count(*) from queue_mapping where seat_name=#{seatName};
    </select>
</mapper>